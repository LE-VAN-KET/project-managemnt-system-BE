
spring:
    servlet:
        multipart:
            enabled: true
            max-file-size: 10MB
            max-request-size: 10MB
    datasource:
        url: jdbc:mariadb://${DATABASE_HOST:165.232.173.235}:${MARIADB_PORT_NUMBER:3307}/auth_service?useSSL=false&useUnicode=yes&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&serverTimezone=GMT+7
        username: auth
        password: auth123
        driver-class-name: org.mariadb.jdbc.Driver
        hikari:
            maximum-pool-size: 10
            connection-timeout: 30000

    jpa:
        show-sql: true
        hibernate:
            ddl-auto: update
        properties:
            hibernate:
                dialect: org.hibernate.dialect.MariaDBDialect

    redis:
        database: 0
        address: redis://${REDIS_HOST:165.232.173.235}:${REDIS_PORT:6379}
        connection-pool-size: 4
        connection-minimum-idle-size: 2
        token-prefix: project-management:token
        token-time-to-live: 7200
#    zipkin:
#        base-url: http://146.190.105.184:9411
#        sender:
#            type: web
#        service:
#            name: user-service
#    sleuth:
#        sampler:
#            probability: 1.0


keystore:
    password: team92pass

# Config Swagger  UI
springdoc:
    api-docs:
        path: /v1/api-docs
    swagger-ui:
        path: /swagger-ui-custom.html
        operationsSorter: method

management:
    health:
        circuitbreakers:
            enabled: true
    endpoints:
        web:
            exposure:
                include: "*"
    endpoint:
        health:
            show-details: always

feign:
    circuitbreaker:
        enabled: true

#Resilience4j Properties
resilience4j:
    circuitbreaker:
        instances:
            organization:
                register-health-indicator: true
                event-consumer-buffer-size: 10
                sliding-window-type: count_based
                sliding-window-size: 5
                failure-rate-threshold: 50
                wait-duration-in-open-state: 5
                permitted-number-of-calls-in-half-open-state: 3
                automatic-transition-from-open-to-half-open-enabled: true
    timelimiter:
        instances:
            organization:
                timeout-duration:
                    3s
    retry:
        instances:
            organization:
                max-attempts: 2
                wait-duration: 3s
app:
    feign:
        config:
            organization-client:
                name: organization-service
                url: http://${ORGANIZATION_HOST:localhost}:${ORGANIZATION_PORT:8186}
            member-client:
                name: member-service
                url: http://${MEMBER_HOST:localhost}:${MEMBER_PORT:8185}


# Config kafka
kafka-config:
    bootstrap-servers: ${KAFKA_BROKER_1:34.143.194.243}:19092, ${KAFKA_BROKER_2:34.143.194.243}:29092, ${KAFKA_BROKER_3:34.143.194.243}:39092
    num-of-partitions: 3
    replication-factor: 3

kafka-producer-config:
    key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
    value-serializer-class: org.springframework.kafka.support.serializer.JsonSerializer
    compression-type: none
    acks: all
    batch-size: 16384
    batch-size-boost-factor: 100
    linger-ms: 5
    request-timeout-ms: 1000
    retry-count: 2

kafka-consumer-config:
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    #    payment-consumer-group-id: payment-topic-consumer
    #    restaurant-approval-consumer-group-id: restaurant-approval-topic-consumer
    auto-offset-reset: earliest
    batch-listener: true
    auto-startup: true
    concurrency-level: 3
    session-timeout-ms: 10000
    heartbeat-interval-ms: 3000
    max-poll-interval-ms: 300000
    max-poll-records: 500
    max-partition-fetch-bytes-default: 1048576
    max-partition-fetch-bytes-boost-factor: 1
    poll-timeout-ms: 150

logstash:
    host: ${LOGSTASH_HOST_PORT:146.190.105.184:5000}
